package components

import (
	"fmt"
	"parkpilot/api"
)

templ Index(mapboxAccessToken string, parks []api.Park, placeName string, state string) {
	@Page("Pick A Park!", pageIndex(mapboxAccessToken, parks, placeName, state))
}

templ pageIndex(mapboxAccessToken string, parks []api.Park, placeName string, state string) {
	<div class="flex flex-col items-center mx-auto text-center pt-12 md:mb-8 mb-4">
		<a href="/" hx-boost="false" class="block">
			<div class="flex flex-col items-center justify-center mx-3 gap-4 md:mb-8 mb-4">
				<img src="/logo.webp" alt="Pick A Park Logo" class="w-36 h-36"/>
				<h1 class="dark:text-amber-100 text-4xl md:text-5xl font-extrabold text-stone-700">Park Pilot</h1>
			</div>
		</a>
		<div class="geocoder rounded bg-stone-100">
			<div id="geocoder"></div>
		</div>
		<input type="hidden" id="mapboxToken" value={ templ.JSONString(mapboxAccessToken) }/>
		<div id="geocoder" class="geocoder mb-8"></div>
	</div>
	<div id="parks-container" class="text-center">
		@Parks(parks, placeName, state)
	</div>
	if len(parks) != 0 {
		<button
			id="load-more-parks"
			hx-get={ fmt.Sprintf("/load-more-parks/%s/%s", placeName, state) }
			hx-target="#parks"
			hx-swap="beforeend"
			hx-push-url="false"
			hx-boost="false"
			class="block w-64 mx-auto mb-8 py-2 px-4 text-lg text-center font-bold text-white bg-lime-700 rounded-2xl hover:bg-lime-800 cursor-pointer"
		>
			Load More
		</button>
		<p class="dark:text-white text-xs mb-4 text-center mx-8"><sup class="dark:text-lime-400 text-base text-lime-800">*</sup> Parks are sorted by as-the-crow-flies distance from your location, and thus may not be sorted by driving distance.</p>
	}
	<script>
	(function() {
		// Check if Geolocation is supported
		if (!navigator.geolocation) {
			console.log("Geolocation is not supported by this browser.");
			return;
			// else if path != /
		} else if (window.location.pathname != '/') {
			return;
		}
	});

	// Get current position
	navigator.geolocation.getCurrentPosition(function(position) {
		const mapboxTokenInput = document.getElementById('mapboxToken');
		const mapAcessToken = JSON.parse(mapboxTokenInput.value);
		let latitude = position.coords.latitude;
		let longitude = position.coords.longitude;

		// Use Mapbox Geocoding API to get place name
		fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?types=place&countries=us&access_token=${mapAcessToken}`)
			.then(response => response.json())
			.then(data => {
				let placeNameParts = data.features[0].place_name.split(',');
				let placeName = placeNameParts[0];
				let state = placeNameParts[1].trim();
				let url = '/place/' + encodeURIComponent(placeName) + '/' + encodeURIComponent(state);

				// Use HTMX to send coordinates to the server and get parks
				htmx.ajax('GET', url, {
					values: {longitude: longitude, latitude: latitude},
					target: '.htmx-body',
				});
			});
	})();
	(function() {
		// Function to load CSS dynamically
		function loadCSS(href) {
			const link = document.createElement('link');
			link.rel = 'stylesheet';
			link.href = href;
			document.head.appendChild(link);
		}

		// Function to load JavaScript dynamically with error handling
		function loadJS(src, callback) {
			const script = document.createElement('script');
			script.src = src;
			script.onload = callback;
			script.onerror = function() {
				console.error('Script load failed:', src);
			};
			document.head.appendChild(script);
		}

		function initMapboxGeocoder() {
			const mapboxTokenInput = document.getElementById('mapboxToken');
			mapboxgl.accessToken = JSON.parse(mapboxTokenInput.value);
			const geocoderElement = document.getElementById('geocoder');
			geocoderElement.innerHTML = ''; // Clear previous instances
			const geocoder = new MapboxGeocoder({
				accessToken: mapboxgl.accessToken,
				mapboxgl: mapboxgl,
				types: 'place',
				countries: 'us',
				language: 'en-US',
				placeholder: 'Where are you?',
			});
		geocoderElement.appendChild(geocoder.onAdd());
			geocoder.on('result', function(e) {
				const coords = e.result.geometry.coordinates;
				const placeNameParts = e.result.place_name.split(',');
				const placeName = placeNameParts[0];
				const state = placeNameParts[1].trim();
				const url = `/place/${encodeURIComponent(placeName)}/${encodeURIComponent(state)}`;

				htmx.ajax('GET', url, {
					values: { longitude: coords[0], latitude: coords[1] },
					target: '.htmx-body',
				});
			});
		}

		function initMapbox() {
			if (typeof MapboxGeocoder === 'undefined') {
				loadCSS('/mapbox-gl-geocoder.css');
				loadJS('/mapbox-gl-geocoder.min.js', initMapboxGeocoder);
			} else {
				initMapboxGeocoder();
			}
		}

		if (typeof mapboxgl === 'undefined') {
			loadCSS('/mapbox-gl.css');
			loadJS('/mapbox-gl.js', initMapbox);
		} else {
			initMapbox();
		}
	})();
	// update the currentCount in load more button
	document.addEventListener('htmx:configRequest', function(event) {
		let currentCount = document.querySelectorAll('#parks .park-card').length;
		if (typeof currentCount !== 'undefined' && window.location.pathname.startsWith('/place/')) {
			if (currentCount >= 32 || currentCount == 0) {
				// hide the button
				document.getElementById('load-more-parks').style.display = 'none';
			}
		}
		// if the hx-get url is load-more-parks, add currentCount to the url
		let url = event.detail.path 
		if (url && url.includes('load-more-parks')) {
			event.detail.parameters.currentCount = currentCount;
		}
	});
	</script>
}
