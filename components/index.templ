package components

import( 
	"parkpilot/api"
	"fmt"
)

templ Index(mapboxAccessToken string, parks []api.Park, placeName string, state string) {
	@DocType()
	@Head("Parks Pilot")
	@Body(pageIndex(mapboxAccessToken, parks, placeName, state))
}

templ pageIndex(mapboxAccessToken string, parks []api.Park, placeName string, state string) {
	<div class="flex flex-col items-center mx-auto text-center pt-12 mb-8">
		<a href="/" hx-boost="false" class="block">
			<div class="flex flex-col items-center justify-center mx-3 gap-4 mb-8">
				<img src="/logo.webp" alt="Pick A Park Logo" class="w-36 h-36" />
				<h1 class="text-4xl md:text-5xl font-extrabold text-stone-700">Park Pilot</h1>
			</div>
		</a>
		<div id="geocoder" class="geocoder"></div>
		<input type="hidden" id="mapboxToken" value={ templ.JSONString(mapboxAccessToken) }/>
		<div id="geocoder" class="geocoder mb-8"></div>
	</div>
	<div id="parks-container" class="text-center">
		@Parks(parks, placeName, state)
	</div>
	<button id="load-more-parks"
		hx-get={ fmt.Sprintf("/load-more-parks/%s/%s", placeName, state) }
		hx-target="#parks" 
		hx-swap="beforeend" 
		hx-push-url="false"
		hx-boost="false"
		class="block w-96 mx-auto mb-8 py-2 px-4 text-lg text-center font-bold text-white bg-lime-700 rounded-2xl hover:bg-lime-800 cursor-pointer">
		Load More Parks
	</button>

	if len(parks) != 0 {
		<p class="text-xs mb-4 text-center"><sup class="text-base text-lime-800">*</sup> Parks are sorted by as-the-crow-flies distance from your location, and thus may not be sorted by driving distance.</p>
	}
	<script>
	initMapbox();
	function initMapbox() {
		const mapboxTokenInput = document.getElementById('mapboxToken');
		mapboxgl.accessToken = JSON.parse(mapboxTokenInput.value);
		let geocoderElement = document.getElementById('geocoder');
		geocoderElement.innerHTML = '';
		let geocoder = new MapboxGeocoder({
			accessToken: mapboxgl.accessToken,
			mapboxgl: mapboxgl,
			countries: 'us',
			types: 'place',
			placeholder: 'Where are you?',
		});
		geocoderElement.appendChild(geocoder.onAdd());
		geocoder.on('result', function(e) {
			let coords = e.result.geometry.coordinates;
			let placeNameParts = e.result.place_name.split(',');
			let placeName = placeNameParts[0];
			let state = placeNameParts[1].trim();
			let url = '/place/' + encodeURIComponent(placeName) + '/' + encodeURIComponent(state);
			// Use HTMX to send coordinates to the server and get parks
			htmx.ajax('GET', url, {
				values: {longitude: coords[0], latitude: coords[1]},
				target: '.htmx-body',
			});
		});
	}
	window.onload = function() {
		const mapboxTokenInput = document.getElementById('mapboxToken');
		const mapAcessToken = JSON.parse(mapboxTokenInput.value);
		// Check if Geolocation is supported
		if (!navigator.geolocation) {
			console.log("Geolocation is not supported by this browser.");
			return;
		} else if (window.location.pathname != '/') {
			return;
		}

		// Get current position
		navigator.geolocation.getCurrentPosition(function(position) {
			let latitude = position.coords.latitude;
			let longitude = position.coords.longitude;
			// Use Mapbox Geocoding API to get place name
			fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?types=place&countries=us&access_token=${mapAcessToken}`)
				.then(response => response.json())
				.then(data => {
					let placeNameParts = data.features[0].place_name.split(',');
					let placeName = placeNameParts[0];
					let state = placeNameParts[1].trim();
					let url = '/place/' + encodeURIComponent(placeName) + '/' + encodeURIComponent(state);

					// Use HTMX to send coordinates to the server and get parks
					htmx.ajax('GET', url, {
						values: {longitude: longitude, latitude: latitude},
						target: '.htmx-body',
					});
				});
		});
	}
	// update the currentCount in load more button
	document.addEventListener('htmx:configRequest', function(event) {
		let currentCount = document.querySelectorAll('#parks .park-card').length;
		if (typeof currentCount !== 'undefined') {
			if (currentCount >= 32 || currentCount == 0) {
				// hide the button
				document.getElementById('load-more-parks').style.display = 'none';
			}
		}
		// if the hx-get url is load-more-parks, add currentCount to the url
		let url = event.detail.path 
		if (url && url.includes('load-more-parks')) {
			event.detail.parameters.currentCount = currentCount;
		}
	});
	</script>
}
